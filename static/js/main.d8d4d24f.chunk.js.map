{"version":3,"sources":["components/home/home.module.css","hoc/Aux.js","components/terminal_challenge/TerminalChallenge.js","assets/images/termylogo.png","components/home/home.js","components/challenge1/challenge1.js","components/challenge2/challenge2.js","App.js","serviceWorker.js","store/reducers/wroomControl.js","index.js","components/terminal_challenge/TerminalChallenge.module.css"],"names":["module","exports","aux","props","children","TerminalChallenge","to","className","classes","Last","Outer","Text","Spacer","Challenge","num","Home","Aux","src","logo","alt","Challenge1","Challenge2","App","path","exact","component","Boolean","window","location","hostname","match","initialState","start","reducer","state","action","type","rootReducer","combineReducers","wroomControl","wroomControlReducer","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,KAAO,mBAAmB,gBAAgB,8B,uGCAvEC,G,MADH,SAACC,GAAD,OAAWA,EAAMC,W,iCCsBdC,EAjBW,SAACF,GAAD,OACxB,cAAC,IAAD,CAAMG,GAAIH,EAAMG,GAAhB,SACE,sBAAKC,UAAWC,IAAQC,KAAxB,UACF,qBAAKF,UAAWC,IAAQE,MAAxB,SACQ,8BACE,oBAAIH,UAAWC,IAAQG,KAAvB,oBAGV,qBAAKJ,UAAWC,IAAQI,SACxB,qBAAKL,UAAWC,IAAQK,UAAxB,SACA,4CAAeV,EAAMW,eCfR,MAA0B,sCCsB1BC,EAdF,WACX,OACE,cAACC,EAAD,UACE,sBAAKT,UAAWC,IAAQO,KAAxB,UACE,qBAAKE,IAAKC,EAAMC,IAAI,SACpB,cAAC,EAAD,CAAmBb,GAAG,cAAcQ,IAAI,MACxC,qBAAKP,UAAWC,IAAQU,OACxB,cAAC,EAAD,CAAmBZ,GAAG,cAAcQ,IAAI,Y,OCRjCM,EALI,kBACf,8BACI,sCCGOC,EALI,kBACf,8BACI,sCCeOC,MAXf,WACE,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWV,IADnC,IAEE,cAAC,IAAD,CAAOQ,KAAK,cAAcE,UAAWL,IAFvC,IAGE,cAAC,IAAD,CAAOG,KAAK,cAAcE,UAAWJ,IAHvC,Q,QCEgBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YClBAC,EAAe,CACnBC,MAAO,MASMC,EANC,WAAmC,IAAlCC,EAAiC,uDAAzBH,EAAcI,EAAW,uCAG5C,OAFIA,EAAOC,KAEJF,GCGPG,EAAcC,YAAgB,CAClCC,aAAcC,IAGVC,EAAQC,YACZL,EACAV,OAAOgB,8BAAgChB,OAAOgB,gCAGhDC,IAASC,OACP,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJK,SAASC,eAAe,SF0GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBGxI5BzD,EAAOC,QAAU,CAAC,MAAQ,iCAAiC,KAAO,gCAAgC,UAAY,qCAAqC,OAAS,kCAAkC,KAAO,mC","file":"static/js/main.d8d4d24f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Home\":\"home_Home__1j57O\",\"logo\":\"home_logo___2XcE\",\"App-logo-spin\":\"home_App-logo-spin__2CFEt\"};","const aux = (props) => props.children;\nexport default aux;\n","import React from \"react\";\n\nimport classes from \"./TerminalChallenge.module.css\";\nimport {Link} from \"react-router-dom\";\n\nconst TerminalChallenge = (props) => (\n  <Link to={props.to}>\n    <div className={classes.Last}>\n  <div className={classes.Outer}>\n          <div>\n            <h1 className={classes.Text}>&gt;_</h1>\n          </div>\n  </div>\n  <div className={classes.Spacer}></div>\n  <div className={classes.Challenge}> \n  <h1>Challenge {props.num}</h1>\n  </div>\n  </div>\n  </Link>\n\n);\n\nexport default TerminalChallenge;\n","export default __webpack_public_path__ + \"static/media/termylogo.d3ec61bd.png\";","import React from \"react\";\nimport Aux from \"../../hoc/Aux\";\nimport classes from \"./home.module.css\";\nimport TerminalChallenge from \"../terminal_challenge/TerminalChallenge\";\nimport logo from \"../../assets/images/termylogo.png\";\n\n// import { Link } from \"react-router-dom\";\n\nconst Home = () => {\n  return (\n    <Aux>\n      <div className={classes.Home}>\n        <img src={logo} alt=\"logo\"></img>\n        <TerminalChallenge to=\"/challenge1\" num=\"1\"/>\n        <div className={classes.logo}></div>\n        <TerminalChallenge to=\"/challenge2\" num=\"2\"/>\n\n      </div>\n    </Aux>\n  );\n};\n\nexport default Home;\n","import React from 'react';\n\nconst Challenge1 = () => (\n    <div>\n        <h1>1</h1>\n    </div>\n)\nexport default Challenge1","import React from 'react';\n\nconst Challenge2 = () => (\n    <div>\n        <h1>2</h1>\n    </div>\n)\nexport default Challenge2","import React from \"react\";\nimport Home from \"./components/home/home\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Challenge1 from \"./components/challenge1/challenge1\";\nimport Challenge2 from \"./components/challenge2/challenge2\";\n\n\n\nfunction App() {\n  return (\n    <Switch>\n      <Route path=\"/\" exact component={Home} />;\n      <Route path=\"/challenge1\" component={Challenge1}/>;\n      <Route path=\"/challenge2\" component={Challenge2}/>;\n\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n  start: null,\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n};\nexport default reducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, combineReducers } from \"redux\";\nimport wroomControlReducer from \"./store/reducers/wroomControl\";\n\nconst rootReducer = combineReducers({\n  wroomControl: wroomControlReducer,\n});\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Outer\":\"TerminalChallenge_Outer__kRs1k\",\"Text\":\"TerminalChallenge_Text__Irtf6\",\"Challenge\":\"TerminalChallenge_Challenge__LPD5L\",\"Spacer\":\"TerminalChallenge_Spacer__1epjz\",\"Last\":\"TerminalChallenge_Last__1E7cS\"};"],"sourceRoot":""}